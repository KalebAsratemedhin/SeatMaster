basePath: /
definitions:
  models.AcceptInvitationRequest:
    properties:
      notes:
        example: Vegetarian, allergic to nuts
        type: string
      rsvp_status:
        allOf:
        - $ref: '#/definitions/models.RSVPStatus'
        enum:
        - pending
        - accept
        - decline
        - maybe
        example: accept
    required:
    - rsvp_status
    type: object
  models.AcceptInvitationResponse:
    properties:
      guest:
        $ref: '#/definitions/models.Guest'
      message:
        example: Successfully accepted invitation
        type: string
    type: object
  models.AuthResponse:
    description: Authentication response with user data and JWT token
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.ChangePasswordRequest:
    description: Password change request data
    properties:
      current_password:
        example: oldpassword123
        type: string
      new_password:
        example: newpassword123
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  models.CreateEventRequest:
    description: Event creation request data
    properties:
      allow_self_rsvp:
        example: false
        type: boolean
      categories:
        example:
        - wedding
        - celebration
        items:
          type: string
        type: array
      date:
        example: "2024-06-15T18:00:00Z"
        type: string
      description:
        example: A beautiful celebration of love
        maxLength: 1000
        type: string
      location:
        example: Grand Hotel Ballroom
        maxLength: 255
        type: string
      max_guests:
        example: 100
        minimum: 1
        type: integer
      name:
        example: John & Jane's Wedding
        maxLength: 255
        minLength: 1
        type: string
      require_approval:
        example: false
        type: boolean
      tags:
        example:
        - formal
        - outdoor
        items:
          type: string
        maxItems: 50
        type: array
      visibility:
        allOf:
        - $ref: '#/definitions/models.EventVisibility'
        enum:
        - private
        - public
        example: private
    required:
    - date
    - location
    - name
    - visibility
    type: object
  models.CreateGuestRequest:
    description: Guest creation request data
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John Doe
        maxLength: 255
        minLength: 1
        type: string
      notes:
        example: Vegetarian, allergic to nuts
        maxLength: 1000
        type: string
      phone:
        example: "+1234567890"
        maxLength: 20
        type: string
    required:
    - email
    - name
    type: object
  models.CreateInvitationRequest:
    properties:
      email:
        example: guest@example.com
        type: string
      expires_in_days:
        example: 30
        maximum: 90
        minimum: 1
        type: integer
      prefilled_name:
        example: John Doe
        type: string
      prefilled_notes:
        example: Vegetarian
        type: string
      prefilled_phone:
        example: "+1234567890"
        type: string
    required:
    - email
    - expires_in_days
    type: object
  models.CreateRoomRequest:
    description: Room creation request data
    properties:
      capacity:
        example: 200
        minimum: 1
        type: integer
      description:
        example: Spacious ballroom with high ceilings
        maxLength: 1000
        type: string
      floor:
        example: 1
        minimum: 0
        type: integer
      name:
        example: Main Ballroom
        maxLength: 255
        minLength: 1
        type: string
      room_type:
        allOf:
        - $ref: '#/definitions/models.RoomType'
        enum:
        - general
        - ballroom
        - conference
        - theater
        - banquet
        - outdoor
        example: ballroom
    required:
    - capacity
    - name
    - room_type
    type: object
  models.CreateSeatGridRequest:
    description: Seat grid creation request data
    properties:
      category:
        allOf:
        - $ref: '#/definitions/models.SeatCategory'
        enum:
        - standard
        - vip
        - accessible
        - premium
        - economy
        - standing
        example: standard
      end_number:
        example: 20
        minimum: 1
        type: integer
      end_row:
        example: Z
        maxLength: 10
        minLength: 1
        type: string
      spacing_x:
        example: 1.2
        minimum: 0.1
        type: number
      spacing_y:
        example: 1.2
        minimum: 0.1
        type: number
      start_number:
        example: 1
        minimum: 1
        type: integer
      start_row:
        example: A
        maxLength: 10
        minLength: 1
        type: string
      start_x:
        example: 0
        type: number
      start_y:
        example: 0
        type: number
    required:
    - category
    - end_number
    - end_row
    - spacing_x
    - spacing_y
    - start_number
    - start_row
    - start_x
    - start_y
    type: object
  models.CreateSeatRequest:
    description: Seat creation request data
    properties:
      category:
        allOf:
        - $ref: '#/definitions/models.SeatCategory'
        enum:
        - standard
        - vip
        - accessible
        - premium
        - economy
        - standing
        example: standard
      height:
        example: 1
        minimum: 0.1
        type: number
      number:
        example: "1"
        maxLength: 10
        minLength: 1
        type: string
      rotation:
        example: 0
        type: number
      row:
        example: A
        maxLength: 10
        minLength: 1
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.SeatStatus'
        enum:
        - available
        - occupied
        - reserved
        - blocked
        - maintenance
        example: available
      width:
        example: 1
        minimum: 0.1
        type: number
      x:
        example: 10.5
        type: number
      "y":
        example: 15.2
        type: number
    required:
    - category
    - number
    - row
    - status
    - x
    - "y"
    type: object
  models.CreateSeatingAssignmentRequest:
    description: Seating assignment creation request data
    properties:
      guest_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      notes:
        example: VIP guest - front row preference
        maxLength: 500
        type: string
      seat_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - guest_id
    - seat_id
    type: object
  models.CreateUserRequest:
    description: User registration request data
    properties:
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      phone:
        example: "+1234567890"
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  models.CreateVenueRequest:
    description: Venue creation request data
    properties:
      address:
        example: 123 Main Street
        maxLength: 255
        type: string
      city:
        example: New York
        maxLength: 100
        type: string
      country:
        example: USA
        maxLength: 100
        type: string
      description:
        example: Elegant ballroom with modern amenities
        maxLength: 1000
        type: string
      is_public:
        example: false
        type: boolean
      name:
        example: Grand Hotel Ballroom
        maxLength: 255
        minLength: 1
        type: string
      phone:
        example: +1-555-123-4567
        maxLength: 20
        type: string
      postal_code:
        example: "10001"
        maxLength: 20
        type: string
      state:
        example: NY
        maxLength: 100
        type: string
      website:
        example: https://grandhotel.com
        maxLength: 255
        type: string
    required:
    - address
    - city
    - country
    - name
    - postal_code
    - state
    type: object
  models.Event:
    description: Event information and details
    properties:
      allow_self_rsvp:
        description: Guest Management Options
        type: boolean
      categories:
        description: Discovery and Organization (for public events)
        items:
          type: string
        type: array
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      date:
        example: "2024-06-15T18:00:00Z"
        type: string
      description:
        example: A beautiful celebration of love
        type: string
      guests:
        description: Guest Management
        items:
          $ref: '#/definitions/models.Guest'
        type: array
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      location:
        example: Grand Hotel Ballroom
        type: string
      max_guests:
        type: integer
      name:
        example: John & Jane's Wedding
        type: string
      owner:
        $ref: '#/definitions/models.User'
      owner_id:
        type: string
      require_approval:
        type: boolean
      slug:
        example: john-jane-wedding-2024
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      visibility:
        allOf:
        - $ref: '#/definitions/models.EventVisibility'
        description: Visibility and Access Control
    type: object
  models.EventResponse:
    description: Event response data
    properties:
      event:
        $ref: '#/definitions/models.Event'
    type: object
  models.EventVisibility:
    enum:
    - private
    - public
    type: string
    x-enum-varnames:
    - EventVisibilityPrivate
    - EventVisibilityPublic
  models.EventsResponse:
    description: Multiple events response data
    properties:
      events:
        items:
          $ref: '#/definitions/models.Event'
        type: array
      total:
        type: integer
    type: object
  models.Guest:
    description: Guest information and RSVP status
    properties:
      approved:
        type: boolean
      created_at:
        description: Timestamps
        example: "2024-01-01T00:00:00Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      event:
        $ref: '#/definitions/models.Event'
      event_id:
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        description: Guest Information
        example: John Doe
        type: string
      notes:
        example: Vegetarian, allergic to nuts
        type: string
      phone:
        example: "+1234567890"
        type: string
      rsvp_date:
        example: "2024-01-15T10:30:00Z"
        type: string
      rsvp_status:
        allOf:
        - $ref: '#/definitions/models.RSVPStatus'
        description: RSVP Status
      seat:
        $ref: '#/definitions/models.Seat'
      seat_id:
        description: Seating (for future implementation)
        type: string
      source:
        allOf:
        - $ref: '#/definitions/models.GuestSource'
        description: Source and Approval
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        description: User relationship (only if guest is a platform user) - NEW FIELD
        type: string
    type: object
  models.GuestRSVPResponse:
    description: Guest RSVP response data
    properties:
      guest:
        $ref: '#/definitions/models.Guest'
      message:
        example: RSVP updated successfully
        type: string
    type: object
  models.GuestRegistrationItem:
    properties:
      approved:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      event_id:
        type: string
      id:
        type: string
      name:
        type: string
      notes:
        type: string
      phone:
        type: string
      rsvp_date:
        type: string
      rsvp_status:
        $ref: '#/definitions/models.RSVPStatus'
      seat:
        $ref: '#/definitions/models.Seat'
      seat_id:
        type: string
      source:
        $ref: '#/definitions/models.GuestSource'
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.GuestResponse:
    description: Guest response data
    properties:
      guest:
        $ref: '#/definitions/models.Guest'
    type: object
  models.GuestSource:
    enum:
    - owner_added
    - invitation
    - user_registration
    type: string
    x-enum-comments:
      GuestSourceInvitation: Registered via invitation
      GuestSourceOwnerAdded: Added by owner manually
      GuestSourceUserRegistration: Self-registered by authenticated platform user
    x-enum-descriptions:
    - Added by owner manually
    - Registered via invitation
    - Self-registered by authenticated platform user
    x-enum-varnames:
    - GuestSourceOwnerAdded
    - GuestSourceInvitation
    - GuestSourceUserRegistration
  models.GuestSummary:
    description: Guest RSVP summary data
    properties:
      confirmation_rate:
        type: number
      confirmed:
        type: integer
      declined:
        type: integer
      maybe:
        type: integer
      pending:
        type: integer
      total_guests:
        type: integer
    type: object
  models.GuestsResponse:
    description: Multiple guests response data
    properties:
      guests:
        items:
          $ref: '#/definitions/models.Guest'
        type: array
      total:
        type: integer
    type: object
  models.InvitationListItem:
    properties:
      accepted_at:
        type: string
      created_at:
        type: string
      email:
        type: string
      expires_at:
        type: string
      id:
        type: string
      prefilled_name:
        type: string
      sent_at:
        type: string
      status:
        $ref: '#/definitions/models.InviteStatus'
    type: object
  models.InvitationResponse:
    properties:
      accepted_at:
        type: string
      created_at:
        type: string
      email:
        type: string
      event_id:
        type: string
      expired_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      prefilled_name:
        type: string
      prefilled_notes:
        type: string
      prefilled_phone:
        type: string
      sent_at:
        type: string
      status:
        $ref: '#/definitions/models.InviteStatus'
      updated_at:
        type: string
    type: object
  models.InviteStatus:
    enum:
    - sent
    - accepted
    - expired
    - cancelled
    type: string
    x-enum-varnames:
    - InviteStatusSent
    - InviteStatusAccepted
    - InviteStatusExpired
    - InviteStatusCancelled
  models.PlusOneRequest:
    description: Plus-one guest information
    properties:
      name:
        example: Jane Doe
        maxLength: 255
        minLength: 1
        type: string
      notes:
        example: Also vegetarian
        maxLength: 1000
        type: string
    required:
    - name
    type: object
  models.RSVPStatus:
    enum:
    - pending
    - accept
    - decline
    - maybe
    type: string
    x-enum-varnames:
    - RSVPStatusPending
    - RSVPStatusAccept
    - RSVPStatusDecline
    - RSVPStatusMaybe
  models.Room:
    description: Room information and details
    properties:
      capacity:
        example: 200
        type: integer
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Spacious ballroom with high ceilings
        type: string
      floor:
        example: 1
        type: integer
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: Main Ballroom
        type: string
      room_type:
        $ref: '#/definitions/models.RoomType'
      seats:
        items:
          $ref: '#/definitions/models.Seat'
        type: array
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      venue:
        $ref: '#/definitions/models.Venue'
      venue_id:
        type: string
    type: object
  models.RoomResponse:
    description: Room response data
    properties:
      room:
        $ref: '#/definitions/models.Room'
    type: object
  models.RoomType:
    enum:
    - general
    - ballroom
    - conference
    - theater
    - banquet
    - outdoor
    type: string
    x-enum-varnames:
    - RoomTypeGeneral
    - RoomTypeBallroom
    - RoomTypeConference
    - RoomTypeTheater
    - RoomTypeBanquet
    - RoomTypeOutdoor
  models.RoomsResponse:
    description: Multiple rooms response data
    properties:
      rooms:
        items:
          $ref: '#/definitions/models.Room'
        type: array
      total:
        type: integer
    type: object
  models.Seat:
    description: Seat information and details
    properties:
      category:
        $ref: '#/definitions/models.SeatCategory'
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      guest:
        $ref: '#/definitions/models.Guest'
      guest_id:
        type: string
      height:
        example: 1
        type: number
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      number:
        example: "1"
        type: string
      room:
        $ref: '#/definitions/models.Room'
      room_id:
        type: string
      rotation:
        example: 0
        type: number
      row:
        example: A
        type: string
      status:
        $ref: '#/definitions/models.SeatStatus'
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      width:
        example: 1
        type: number
      x:
        description: Position X coordinate
        example: 10.5
        type: number
      "y":
        description: Position Y coordinate
        example: 15.2
        type: number
    type: object
  models.SeatCategory:
    enum:
    - standard
    - vip
    - accessible
    - premium
    - economy
    - standing
    type: string
    x-enum-varnames:
    - SeatCategoryStandard
    - SeatCategoryVIP
    - SeatCategoryAccessible
    - SeatCategoryPremium
    - SeatCategoryEconomy
    - SeatCategoryStanding
  models.SeatResponse:
    description: Seat response data
    properties:
      seat:
        $ref: '#/definitions/models.Seat'
    type: object
  models.SeatStatus:
    enum:
    - available
    - occupied
    - reserved
    - blocked
    - maintenance
    type: string
    x-enum-varnames:
    - SeatStatusAvailable
    - SeatStatusOccupied
    - SeatStatusReserved
    - SeatStatusBlocked
    - SeatStatusMaintenance
  models.SeatingAssignment:
    description: Seating assignment information and details
    properties:
      assigned_at:
        type: string
      assigned_by:
        type: string
      assigned_by_user:
        $ref: '#/definitions/models.User'
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      event:
        $ref: '#/definitions/models.Event'
      event_id:
        type: string
      guest:
        $ref: '#/definitions/models.Guest'
      guest_id:
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      notes:
        example: VIP guest - front row preference
        type: string
      seat:
        $ref: '#/definitions/models.Seat'
      seat_id:
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  models.SeatingAssignmentResponse:
    description: Seating assignment response data
    properties:
      seating_assignment:
        $ref: '#/definitions/models.SeatingAssignment'
    type: object
  models.SeatingAssignmentsResponse:
    description: Multiple seating assignments response data
    properties:
      seating_assignments:
        items:
          $ref: '#/definitions/models.SeatingAssignment'
        type: array
      total:
        type: integer
    type: object
  models.SeatsResponse:
    description: Multiple seats response data
    properties:
      seats:
        items:
          $ref: '#/definitions/models.Seat'
        type: array
      total:
        type: integer
    type: object
  models.SignInRequest:
    description: User login request data
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.UpdateEventRequest:
    description: Event update request data
    properties:
      allow_self_rsvp:
        example: true
        type: boolean
      categories:
        example:
        - wedding
        - celebration
        items:
          type: string
        type: array
      date:
        example: "2024-06-15T18:00:00Z"
        type: string
      description:
        example: A beautiful celebration of love
        maxLength: 1000
        type: string
      location:
        example: Grand Hotel Ballroom
        maxLength: 255
        type: string
      max_guests:
        example: 150
        minimum: 1
        type: integer
      name:
        example: John & Jane's Wedding
        maxLength: 255
        minLength: 1
        type: string
      require_approval:
        example: false
        type: boolean
      tags:
        example:
        - formal
        - outdoor
        items:
          type: string
        maxItems: 50
        type: array
      visibility:
        allOf:
        - $ref: '#/definitions/models.EventVisibility'
        enum:
        - private
        - public
        example: public
    type: object
  models.UpdateGuestRSVPRequest:
    description: Guest RSVP update request data
    properties:
      notes:
        example: Looking forward to it!
        maxLength: 1000
        type: string
      rsvp_status:
        allOf:
        - $ref: '#/definitions/models.RSVPStatus'
        enum:
        - pending
        - accept
        - decline
        - maybe
        example: accept
    required:
    - rsvp_status
    type: object
  models.UpdateGuestRequest:
    description: Guest update request data
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John Doe
        maxLength: 255
        minLength: 1
        type: string
      notes:
        example: Vegetarian, allergic to nuts
        maxLength: 1000
        type: string
      phone:
        example: "+1234567890"
        maxLength: 20
        type: string
      rsvp_status:
        allOf:
        - $ref: '#/definitions/models.RSVPStatus'
        enum:
        - pending
        - accept
        - decline
        - maybe
        example: accept
    type: object
  models.UpdateInvitationRequest:
    properties:
      expires_in_days:
        example: 30
        maximum: 90
        minimum: 1
        type: integer
      prefilled_name:
        example: John Doe
        type: string
      prefilled_notes:
        example: Vegetarian
        type: string
      prefilled_phone:
        example: "+1234567890"
        type: string
    type: object
  models.UpdateProfileRequest:
    description: Profile update request data
    properties:
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      phone:
        example: "+1234567890"
        type: string
      profile_pic:
        example: https://example.com/profile.jpg
        type: string
    required:
    - first_name
    - last_name
    type: object
  models.UpdateRoomRequest:
    description: Room update request data
    properties:
      capacity:
        example: 250
        minimum: 1
        type: integer
      description:
        example: Spacious ballroom with high ceilings
        maxLength: 1000
        type: string
      floor:
        example: 1
        minimum: 0
        type: integer
      name:
        example: Main Ballroom
        maxLength: 255
        minLength: 1
        type: string
      room_type:
        allOf:
        - $ref: '#/definitions/models.RoomType'
        enum:
        - general
        - ballroom
        - conference
        - theater
        - banquet
        - outdoor
        example: ballroom
    type: object
  models.UpdateSeatRequest:
    description: Seat update request data
    properties:
      category:
        allOf:
        - $ref: '#/definitions/models.SeatCategory'
        enum:
        - standard
        - vip
        - accessible
        - premium
        - economy
        - standing
        example: vip
      height:
        example: 1.2
        minimum: 0.1
        type: number
      number:
        example: "2"
        maxLength: 10
        minLength: 1
        type: string
      rotation:
        example: 45
        type: number
      row:
        example: B
        maxLength: 10
        minLength: 1
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.SeatStatus'
        enum:
        - available
        - occupied
        - reserved
        - blocked
        - maintenance
        example: reserved
      width:
        example: 1.2
        minimum: 0.1
        type: number
      x:
        example: 12
        type: number
      "y":
        example: 18
        type: number
    type: object
  models.UpdateVenueRequest:
    description: Venue update request data
    properties:
      address:
        example: 123 Main Street
        maxLength: 255
        type: string
      city:
        example: New York
        maxLength: 100
        type: string
      country:
        example: USA
        maxLength: 100
        type: string
      description:
        example: Elegant ballroom with modern amenities
        maxLength: 1000
        type: string
      is_public:
        example: true
        type: boolean
      name:
        example: Grand Hotel Ballroom
        maxLength: 255
        minLength: 1
        type: string
      phone:
        example: +1-555-123-4567
        maxLength: 20
        type: string
      postal_code:
        example: "10001"
        maxLength: 20
        type: string
      state:
        example: NY
        maxLength: 100
        type: string
      website:
        example: https://grandhotel.com
        maxLength: 255
        type: string
    type: object
  models.User:
    description: User account information
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      last_name:
        example: Doe
        type: string
      phone:
        example: "+1234567890"
        type: string
      profile_pic:
        example: https://example.com/profile.jpg
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  models.UserEventRegistrationRequest:
    description: User event registration request data
    properties:
      notes:
        example: Vegetarian, allergic to nuts
        maxLength: 1000
        type: string
      plus_one:
        $ref: '#/definitions/models.PlusOneRequest'
    type: object
  models.UserEventRegistrationResponse:
    properties:
      guest:
        $ref: '#/definitions/models.GuestRegistrationItem'
      message:
        example: Successfully registered for event
        type: string
    type: object
  models.Venue:
    description: Venue information and details
    properties:
      address:
        example: 123 Main Street
        type: string
      city:
        example: New York
        type: string
      country:
        example: USA
        type: string
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Elegant ballroom with modern amenities
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_public:
        type: boolean
      name:
        example: Grand Hotel Ballroom
        type: string
      owner:
        $ref: '#/definitions/models.User'
      owner_id:
        type: string
      phone:
        example: +1-555-123-4567
        type: string
      postal_code:
        example: "10001"
        type: string
      rooms:
        items:
          $ref: '#/definitions/models.Room'
        type: array
      state:
        example: NY
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      website:
        example: https://grandhotel.com
        type: string
    type: object
  models.VenueResponse:
    description: Venue response data
    properties:
      venue:
        $ref: '#/definitions/models.Venue'
    type: object
  models.VenuesResponse:
    description: Multiple venues response data
    properties:
      total:
        type: integer
      venues:
        items:
          $ref: '#/definitions/models.Venue'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the SeatMaster backend server for event management and seating
    arrangements.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SeatMaster Backend API
  version: "1.0"
paths:
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - auth
  /auth/signout:
    post:
      consumes:
      - application/json
      description: Logout user (client-side token removal)
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            additionalProperties: true
            type: object
      summary: User logout
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
      summary: User registration
      tags:
      - auth
  /events:
    get:
      consumes:
      - application/json
      description: Get all events owned by the current user
      produces:
      - application/json
      responses:
        "200":
          description: User events
          schema:
            $ref: '#/definitions/models.EventsResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event
      parameters:
      - description: Event creation data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.CreateEventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Event created successfully
          schema:
            $ref: '#/definitions/models.EventResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create event
      tags:
      - events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing event
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Get event details by ID
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event details
          schema:
            $ref: '#/definitions/models.EventResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get event
      tags:
      - events
    patch:
      consumes:
      - application/json
      description: Update an existing event (partial update)
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Event update data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Event updated successfully
          schema:
            $ref: '#/definitions/models.EventResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update event
      tags:
      - events
  /events/{id}/guests:
    get:
      consumes:
      - application/json
      description: Get all guests for a specific event
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event guests
          schema:
            $ref: '#/definitions/models.GuestsResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get event guests
      tags:
      - guests
    post:
      consumes:
      - application/json
      description: Create a new guest for an event
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Guest creation data
        in: body
        name: guest
        required: true
        schema:
          $ref: '#/definitions/models.CreateGuestRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Guest created successfully
          schema:
            $ref: '#/definitions/models.GuestResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create guest
      tags:
      - guests
  /events/{id}/guests/{guestId}:
    delete:
      consumes:
      - application/json
      description: Remove a guest from an event
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Guest ID (UUID)
        in: path
        name: guestId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Guest deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Guest not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete guest
      tags:
      - guests
    get:
      consumes:
      - application/json
      description: Get guest details by ID
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Guest ID (UUID)
        in: path
        name: guestId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Guest details
          schema:
            $ref: '#/definitions/models.GuestResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Guest not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get guest
      tags:
      - guests
    patch:
      consumes:
      - application/json
      description: Update an existing guest (partial update)
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Guest ID (UUID)
        in: path
        name: guestId
        required: true
        type: string
      - description: Guest update data
        in: body
        name: guest
        required: true
        schema:
          $ref: '#/definitions/models.UpdateGuestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Guest updated successfully
          schema:
            $ref: '#/definitions/models.GuestResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Guest not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update guest
      tags:
      - guests
  /events/{id}/guests/{guestId}/approve:
    post:
      consumes:
      - application/json
      description: Approve a pending guest for an event
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Guest ID (UUID)
        in: path
        name: guestId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Guest approved successfully
          schema:
            $ref: '#/definitions/models.GuestResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Guest not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Approve guest
      tags:
      - guests
  /events/{id}/guests/{guestId}/rsvp:
    patch:
      consumes:
      - application/json
      description: Update a guest's RSVP status
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Guest ID (UUID)
        in: path
        name: guestId
        required: true
        type: string
      - description: RSVP update data
        in: body
        name: rsvp
        required: true
        schema:
          $ref: '#/definitions/models.UpdateGuestRSVPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: RSVP updated successfully
          schema:
            $ref: '#/definitions/models.GuestRSVPResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Guest not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update guest RSVP
      tags:
      - guests
  /events/{id}/guests/summary:
    get:
      consumes:
      - application/json
      description: Get summary statistics of guest RSVP statuses for an event
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Guest summary statistics
          schema:
            $ref: '#/definitions/models.GuestSummary'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get guest summary
      tags:
      - guests
  /events/{id}/invitations:
    get:
      consumes:
      - application/json
      description: Get all invitations for a specific event
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of invitations
          schema:
            items:
              $ref: '#/definitions/models.InvitationListItem'
            type: array
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get event invitations
      tags:
      - invitations
    post:
      consumes:
      - application/json
      description: Create a new invitation for an event
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Invitation data
        in: body
        name: invitation
        required: true
        schema:
          $ref: '#/definitions/models.CreateInvitationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Invitation created successfully
          schema:
            $ref: '#/definitions/models.InvitationResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create invitation
      tags:
      - invitations
  /events/{id}/invitations/{invitationId}:
    delete:
      consumes:
      - application/json
      description: Cancel an existing invitation
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Invitation ID (UUID)
        in: path
        name: invitationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invitation cancelled successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Invitation not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cancel invitation
      tags:
      - invitations
    get:
      consumes:
      - application/json
      description: Get details of a specific invitation
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Invitation ID (UUID)
        in: path
        name: invitationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invitation details
          schema:
            $ref: '#/definitions/models.InvitationResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Invitation not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get invitation details
      tags:
      - invitations
    patch:
      consumes:
      - application/json
      description: Update an existing invitation
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Invitation ID (UUID)
        in: path
        name: invitationId
        required: true
        type: string
      - description: Invitation update data
        in: body
        name: invitation
        required: true
        schema:
          $ref: '#/definitions/models.UpdateInvitationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Invitation updated successfully
          schema:
            $ref: '#/definitions/models.InvitationResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Invitation not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update invitation
      tags:
      - invitations
  /events/{id}/invitations/{invitationId}/resend:
    post:
      consumes:
      - application/json
      description: Resend an invitation with a new token
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Invitation ID (UUID)
        in: path
        name: invitationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invitation resent successfully
          schema:
            $ref: '#/definitions/models.InvitationResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Invitation not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Resend invitation
      tags:
      - invitations
  /events/{id}/register:
    post:
      consumes:
      - application/json
      description: Register the current user for a public event
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Registration data
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/models.UserEventRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            $ref: '#/definitions/models.UserEventRegistrationResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Event is not public
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Register for event
      tags:
      - user-registrations
  /events/{id}/registration:
    delete:
      consumes:
      - application/json
      description: Cancel the current user's event registration
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Registration cancelled successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Registration not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cancel user registration
      tags:
      - user-registrations
    patch:
      consumes:
      - application/json
      description: Update the current user's event registration
      parameters:
      - description: Event ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Registration update data
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/models.UpdateGuestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration updated successfully
          schema:
            $ref: '#/definitions/models.GuestResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Registration not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user registration
      tags:
      - user-registrations
  /events/{id}/seating:
    get:
      description: Retrieve all seat assignments for an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SeatingAssignmentsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get seat assignments
      tags:
      - seating
  /events/{id}/seating/assign:
    post:
      consumes:
      - application/json
      description: Assign a guest to a specific seat for an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Seat ID
        in: path
        name: seatId
        required: true
        type: string
      - description: Seating assignment data
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/models.CreateSeatingAssignmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SeatingAssignmentResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Assign guest to seat
      tags:
      - seating
  /events/{id}/seating/assign/{seatId}:
    delete:
      description: Remove a guest from a specific seat
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Seat ID
        in: path
        name: seatId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Unassign guest from seat
      tags:
      - seating
  /events/public:
    get:
      consumes:
      - application/json
      description: Get all public events for discovery
      produces:
      - application/json
      responses:
        "200":
          description: Public events
          schema:
            $ref: '#/definitions/models.EventsResponse'
      summary: Get public events
      tags:
      - events
  /events/user/registrations:
    get:
      consumes:
      - application/json
      description: Get all event registrations for the current user
      produces:
      - application/json
      responses:
        "200":
          description: User registrations with total count
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user registrations
      tags:
      - user-registrations
  /invitations/{token}:
    get:
      consumes:
      - application/json
      description: Get invitation details using the invitation token (public)
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invitation details
          schema:
            $ref: '#/definitions/models.InvitationResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Invitation not found
          schema:
            additionalProperties: true
            type: object
      summary: Get invitation by token
      tags:
      - invitations
  /invitations/{token}/accept:
    post:
      consumes:
      - application/json
      description: Accept an invitation using the invitation token (public)
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      - description: Acceptance data (RSVP status required, notes optional)
        in: body
        name: acceptance
        required: true
        schema:
          $ref: '#/definitions/models.AcceptInvitationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Invitation accepted successfully
          schema:
            $ref: '#/definitions/models.AcceptInvitationResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Invitation not found
          schema:
            additionalProperties: true
            type: object
      summary: Accept invitation
      tags:
      - invitations
  /profile:
    get:
      consumes:
      - application/json
      description: Get the current authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: Update the current authenticated user's profile information
      parameters:
      - description: Profile update data
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - profile
  /profile/password:
    put:
      consumes:
      - application/json
      description: Change the current authenticated user's password
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - profile
  /venues:
    get:
      description: Retrieve all venues owned by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VenuesResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user's venues
      tags:
      - venues
    post:
      consumes:
      - application/json
      description: Create a new venue for the authenticated user
      parameters:
      - description: Venue creation data
        in: body
        name: venue
        required: true
        schema:
          $ref: '#/definitions/models.CreateVenueRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.VenueResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new venue
      tags:
      - venues
  /venues/{id}:
    delete:
      description: Delete an existing venue
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete venue
      tags:
      - venues
    get:
      description: Retrieve a specific venue by ID
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VenueResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get venue by ID
      tags:
      - venues
    patch:
      consumes:
      - application/json
      description: Update an existing venue
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Venue update data
        in: body
        name: venue
        required: true
        schema:
          $ref: '#/definitions/models.UpdateVenueRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VenueResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update venue
      tags:
      - venues
  /venues/{id}/rooms:
    get:
      description: Retrieve all rooms in a specific venue
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoomsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get rooms in venue
      tags:
      - rooms
    post:
      consumes:
      - application/json
      description: Create a new room in a venue
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Room creation data
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/models.CreateRoomRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RoomResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new room
      tags:
      - rooms
  /venues/{id}/rooms/{roomId}:
    delete:
      description: Delete an existing room
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Room ID
        in: path
        name: roomId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete room
      tags:
      - rooms
    get:
      description: Retrieve a specific room by ID
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Room ID
        in: path
        name: roomId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoomResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get room by ID
      tags:
      - rooms
    patch:
      consumes:
      - application/json
      description: Update an existing room
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Room ID
        in: path
        name: roomId
        required: true
        type: string
      - description: Room update data
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRoomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoomResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update room
      tags:
      - rooms
  /venues/{id}/rooms/{roomId}/seats:
    get:
      description: Retrieve all seats in a specific room
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Room ID
        in: path
        name: roomId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SeatsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get seats in room
      tags:
      - seats
    post:
      consumes:
      - application/json
      description: Create a new seat in a room
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Room ID
        in: path
        name: roomId
        required: true
        type: string
      - description: Seat creation data
        in: body
        name: seat
        required: true
        schema:
          $ref: '#/definitions/models.CreateSeatRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SeatResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new seat
      tags:
      - seats
  /venues/{id}/rooms/{roomId}/seats/{seatId}:
    delete:
      description: Delete an existing seat
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Room ID
        in: path
        name: roomId
        required: true
        type: string
      - description: Seat ID
        in: path
        name: seatId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete seat
      tags:
      - seats
    patch:
      consumes:
      - application/json
      description: Update an existing seat
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Room ID
        in: path
        name: roomId
        required: true
        type: string
      - description: Seat ID
        in: path
        name: seatId
        required: true
        type: string
      - description: Seat update data
        in: body
        name: seat
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSeatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SeatResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update seat
      tags:
      - seats
  /venues/{id}/rooms/{roomId}/seats/grid:
    post:
      consumes:
      - application/json
      description: Create multiple seats in a grid layout
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Room ID
        in: path
        name: roomId
        required: true
        type: string
      - description: Seat grid creation data
        in: body
        name: grid
        required: true
        schema:
          $ref: '#/definitions/models.CreateSeatGridRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SeatsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a grid of seats
      tags:
      - seats
  /venues/public:
    get:
      description: Retrieve all public venues
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VenuesResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get public venues
      tags:
      - venues
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
