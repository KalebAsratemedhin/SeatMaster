// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get information about the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/signout": {
            "post": {
                "description": "Logout user (client-side token removal)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Create a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all events owned by the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get user events",
                "responses": {
                    "200": {
                        "description": "User events",
                        "schema": {
                            "$ref": "#/definitions/models.EventsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create event",
                "parameters": [
                    {
                        "description": "Event creation data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateEventRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Event created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.EventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/public": {
            "get": {
                "description": "Get all public events for discovery",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get public events",
                "responses": {
                    "200": {
                        "description": "Public events",
                        "schema": {
                            "$ref": "#/definitions/models.EventsResponse"
                        }
                    }
                }
            }
        },
        "/events/user/registrations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all event registrations for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-registrations"
                ],
                "summary": "Get user registrations",
                "responses": {
                    "200": {
                        "description": "User registrations with total count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get event details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event details",
                        "schema": {
                            "$ref": "#/definitions/models.EventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Delete event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing event (partial update)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Event update data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.EventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/guests": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all guests for a specific event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guests"
                ],
                "summary": "Get event guests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event guests",
                        "schema": {
                            "$ref": "#/definitions/models.GuestsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new guest for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guests"
                ],
                "summary": "Create guest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Guest creation data",
                        "name": "guest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateGuestRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Guest created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GuestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/guests/summary": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get summary statistics of guest RSVP statuses for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guests"
                ],
                "summary": "Get guest summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest summary statistics",
                        "schema": {
                            "$ref": "#/definitions/models.GuestSummary"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/guests/{guestId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get guest details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guests"
                ],
                "summary": "Get guest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Guest ID (UUID)",
                        "name": "guestId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest details",
                        "schema": {
                            "$ref": "#/definitions/models.GuestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Guest not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a guest from an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guests"
                ],
                "summary": "Delete guest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Guest ID (UUID)",
                        "name": "guestId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Guest not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing guest (partial update)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guests"
                ],
                "summary": "Update guest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Guest ID (UUID)",
                        "name": "guestId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Guest update data",
                        "name": "guest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateGuestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GuestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Guest not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/guests/{guestId}/approve": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Approve a pending guest for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guests"
                ],
                "summary": "Approve guest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Guest ID (UUID)",
                        "name": "guestId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest approved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GuestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Guest not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/guests/{guestId}/rsvp": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a guest's RSVP status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guests"
                ],
                "summary": "Update guest RSVP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Guest ID (UUID)",
                        "name": "guestId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "RSVP update data",
                        "name": "rsvp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateGuestRSVPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RSVP updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GuestRSVPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Guest not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/invitations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all invitations for a specific event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invitations"
                ],
                "summary": "Get event invitations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invitations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InvitationListItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new invitation for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invitations"
                ],
                "summary": "Create invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invitation data",
                        "name": "invitation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateInvitationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Invitation created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.InvitationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/invitations/{invitationId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific invitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invitations"
                ],
                "summary": "Get invitation details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Invitation ID (UUID)",
                        "name": "invitationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation details",
                        "schema": {
                            "$ref": "#/definitions/models.InvitationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Invitation not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel an existing invitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invitations"
                ],
                "summary": "Cancel invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Invitation ID (UUID)",
                        "name": "invitationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation cancelled successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Invitation not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing invitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invitations"
                ],
                "summary": "Update invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Invitation ID (UUID)",
                        "name": "invitationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invitation update data",
                        "name": "invitation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateInvitationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.InvitationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Invitation not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/invitations/{invitationId}/resend": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resend an invitation with a new token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invitations"
                ],
                "summary": "Resend invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Invitation ID (UUID)",
                        "name": "invitationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation resent successfully",
                        "schema": {
                            "$ref": "#/definitions/models.InvitationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Invitation not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/register": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Register the current user for a public event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-registrations"
                ],
                "summary": "Register for event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Registration data",
                        "name": "registration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserEventRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/models.UserEventRegistrationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - Event is not public",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/registration": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel the current user's event registration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-registrations"
                ],
                "summary": "Cancel user registration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration cancelled successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Registration not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the current user's event registration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-registrations"
                ],
                "summary": "Update user registration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Registration update data",
                        "name": "registration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateGuestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GuestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Registration not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/seating": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all seat assignments for an event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seating"
                ],
                "summary": "Get seat assignments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SeatingAssignmentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/seating/assign": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign a guest to a specific seat for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seating"
                ],
                "summary": "Assign guest to seat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Seat ID",
                        "name": "seatId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Seating assignment data",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateSeatingAssignmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.SeatingAssignmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}/seating/assign/{seatId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a guest from a specific seat",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seating"
                ],
                "summary": "Unassign guest from seat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Seat ID",
                        "name": "seatId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/invitations/{token}": {
            "get": {
                "description": "Get invitation details using the invitation token (public)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invitations"
                ],
                "summary": "Get invitation by token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invitation token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation details",
                        "schema": {
                            "$ref": "#/definitions/models.InvitationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Invitation not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/invitations/{token}/accept": {
            "post": {
                "description": "Accept an invitation using the invitation token (public)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invitations"
                ],
                "summary": "Accept invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invitation token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Acceptance data (RSVP status required, notes optional)",
                        "name": "acceptance",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AcceptInvitationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation accepted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.AcceptInvitationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Invitation not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current authenticated user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the current authenticated user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile update data",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/profile/password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change the current authenticated user's password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "Password change data",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/venues": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all venues owned by the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "venues"
                ],
                "summary": "Get user's venues",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VenuesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new venue for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "venues"
                ],
                "summary": "Create a new venue",
                "parameters": [
                    {
                        "description": "Venue creation data",
                        "name": "venue",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateVenueRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.VenueResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/venues/public": {
            "get": {
                "description": "Retrieve all public venues",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "venues"
                ],
                "summary": "Get public venues",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VenuesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/venues/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific venue by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "venues"
                ],
                "summary": "Get venue by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VenueResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing venue",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "venues"
                ],
                "summary": "Delete venue",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing venue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "venues"
                ],
                "summary": "Update venue",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Venue update data",
                        "name": "venue",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateVenueRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VenueResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/venues/{id}/rooms": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all rooms in a specific venue",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Get rooms in venue",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RoomsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new room in a venue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Create a new room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Room creation data",
                        "name": "room",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateRoomRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.RoomResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/venues/{id}/rooms/{roomId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific room by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Get room by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RoomResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing room",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Delete room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing room",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Update room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Room update data",
                        "name": "room",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateRoomRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RoomResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/venues/{id}/rooms/{roomId}/seats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all seats in a specific room",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seats"
                ],
                "summary": "Get seats in room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SeatsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new seat in a room",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seats"
                ],
                "summary": "Create a new seat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Seat creation data",
                        "name": "seat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateSeatRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.SeatResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/venues/{id}/rooms/{roomId}/seats/grid": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create multiple seats in a grid layout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seats"
                ],
                "summary": "Create a grid of seats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Seat grid creation data",
                        "name": "grid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateSeatGridRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.SeatsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/venues/{id}/rooms/{roomId}/seats/{seatId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing seat",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seats"
                ],
                "summary": "Delete seat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Seat ID",
                        "name": "seatId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing seat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seats"
                ],
                "summary": "Update seat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Seat ID",
                        "name": "seatId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Seat update data",
                        "name": "seat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateSeatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SeatResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AcceptInvitationRequest": {
            "type": "object",
            "required": [
                "rsvp_status"
            ],
            "properties": {
                "notes": {
                    "type": "string",
                    "example": "Vegetarian, allergic to nuts"
                },
                "rsvp_status": {
                    "enum": [
                        "pending",
                        "accept",
                        "decline",
                        "maybe"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RSVPStatus"
                        }
                    ],
                    "example": "accept"
                }
            }
        },
        "models.AcceptInvitationResponse": {
            "type": "object",
            "properties": {
                "guest": {
                    "$ref": "#/definitions/models.Guest"
                },
                "message": {
                    "type": "string",
                    "example": "Successfully accepted invitation"
                }
            }
        },
        "models.AuthResponse": {
            "description": "Authentication response with user data and JWT token",
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "models.ChangePasswordRequest": {
            "description": "Password change request data",
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "type": "string",
                    "example": "oldpassword123"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "newpassword123"
                }
            }
        },
        "models.CreateEventRequest": {
            "description": "Event creation request data",
            "type": "object",
            "required": [
                "date",
                "location",
                "name",
                "visibility"
            ],
            "properties": {
                "allow_self_rsvp": {
                    "type": "boolean",
                    "example": false
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "wedding",
                        "celebration"
                    ]
                },
                "date": {
                    "type": "string",
                    "example": "2024-06-15T18:00:00Z"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "A beautiful celebration of love"
                },
                "location": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Grand Hotel Ballroom"
                },
                "max_guests": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 100
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "John \u0026 Jane's Wedding"
                },
                "require_approval": {
                    "type": "boolean",
                    "example": false
                },
                "tags": {
                    "type": "array",
                    "maxItems": 50,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "formal",
                        "outdoor"
                    ]
                },
                "visibility": {
                    "enum": [
                        "private",
                        "public"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.EventVisibility"
                        }
                    ],
                    "example": "private"
                }
            }
        },
        "models.CreateGuestRequest": {
            "description": "Guest creation request data",
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "John Doe"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Vegetarian, allergic to nuts"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "+1234567890"
                }
            }
        },
        "models.CreateInvitationRequest": {
            "type": "object",
            "required": [
                "email",
                "expires_in_days"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "guest@example.com"
                },
                "expires_in_days": {
                    "type": "integer",
                    "maximum": 90,
                    "minimum": 1,
                    "example": 30
                },
                "prefilled_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "prefilled_notes": {
                    "type": "string",
                    "example": "Vegetarian"
                },
                "prefilled_phone": {
                    "type": "string",
                    "example": "+1234567890"
                }
            }
        },
        "models.CreateRoomRequest": {
            "description": "Room creation request data",
            "type": "object",
            "required": [
                "capacity",
                "name",
                "room_type"
            ],
            "properties": {
                "capacity": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 200
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Spacious ballroom with high ceilings"
                },
                "floor": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Main Ballroom"
                },
                "room_type": {
                    "enum": [
                        "general",
                        "ballroom",
                        "conference",
                        "theater",
                        "banquet",
                        "outdoor"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RoomType"
                        }
                    ],
                    "example": "ballroom"
                }
            }
        },
        "models.CreateSeatGridRequest": {
            "description": "Seat grid creation request data",
            "type": "object",
            "required": [
                "category",
                "end_number",
                "end_row",
                "spacing_x",
                "spacing_y",
                "start_number",
                "start_row",
                "start_x",
                "start_y"
            ],
            "properties": {
                "category": {
                    "enum": [
                        "standard",
                        "vip",
                        "accessible",
                        "premium",
                        "economy",
                        "standing"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SeatCategory"
                        }
                    ],
                    "example": "standard"
                },
                "end_number": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 20
                },
                "end_row": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 1,
                    "example": "Z"
                },
                "spacing_x": {
                    "type": "number",
                    "minimum": 0.1,
                    "example": 1.2
                },
                "spacing_y": {
                    "type": "number",
                    "minimum": 0.1,
                    "example": 1.2
                },
                "start_number": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "start_row": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 1,
                    "example": "A"
                },
                "start_x": {
                    "type": "number",
                    "example": 0
                },
                "start_y": {
                    "type": "number",
                    "example": 0
                }
            }
        },
        "models.CreateSeatRequest": {
            "description": "Seat creation request data",
            "type": "object",
            "required": [
                "category",
                "number",
                "row",
                "status",
                "x",
                "y"
            ],
            "properties": {
                "category": {
                    "enum": [
                        "standard",
                        "vip",
                        "accessible",
                        "premium",
                        "economy",
                        "standing"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SeatCategory"
                        }
                    ],
                    "example": "standard"
                },
                "height": {
                    "type": "number",
                    "minimum": 0.1,
                    "example": 1
                },
                "number": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 1,
                    "example": "1"
                },
                "rotation": {
                    "type": "number",
                    "example": 0
                },
                "row": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 1,
                    "example": "A"
                },
                "status": {
                    "enum": [
                        "available",
                        "occupied",
                        "reserved",
                        "blocked",
                        "maintenance"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SeatStatus"
                        }
                    ],
                    "example": "available"
                },
                "width": {
                    "type": "number",
                    "minimum": 0.1,
                    "example": 1
                },
                "x": {
                    "type": "number",
                    "example": 10.5
                },
                "y": {
                    "type": "number",
                    "example": 15.2
                }
            }
        },
        "models.CreateSeatingAssignmentRequest": {
            "description": "Seating assignment creation request data",
            "type": "object",
            "required": [
                "guest_id",
                "seat_id"
            ],
            "properties": {
                "guest_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "VIP guest - front row preference"
                },
                "seat_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "models.CreateUserRequest": {
            "description": "User registration request data",
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                }
            }
        },
        "models.CreateVenueRequest": {
            "description": "Venue creation request data",
            "type": "object",
            "required": [
                "address",
                "city",
                "country",
                "name",
                "postal_code",
                "state"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "123 Main Street"
                },
                "city": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "New York"
                },
                "country": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "USA"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Elegant ballroom with modern amenities"
                },
                "is_public": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Grand Hotel Ballroom"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "+1-555-123-4567"
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "10001"
                },
                "state": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "NY"
                },
                "website": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "https://grandhotel.com"
                }
            }
        },
        "models.Event": {
            "description": "Event information and details",
            "type": "object",
            "properties": {
                "allow_self_rsvp": {
                    "description": "Guest Management Options",
                    "type": "boolean"
                },
                "categories": {
                    "description": "Discovery and Organization (for public events)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "date": {
                    "type": "string",
                    "example": "2024-06-15T18:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "A beautiful celebration of love"
                },
                "guests": {
                    "description": "Guest Management",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Guest"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "location": {
                    "type": "string",
                    "example": "Grand Hotel Ballroom"
                },
                "max_guests": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "example": "John \u0026 Jane's Wedding"
                },
                "owner": {
                    "$ref": "#/definitions/models.User"
                },
                "owner_id": {
                    "type": "string"
                },
                "require_approval": {
                    "type": "boolean"
                },
                "slug": {
                    "type": "string",
                    "example": "john-jane-wedding-2024"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "visibility": {
                    "description": "Visibility and Access Control",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.EventVisibility"
                        }
                    ]
                }
            }
        },
        "models.EventResponse": {
            "description": "Event response data",
            "type": "object",
            "properties": {
                "event": {
                    "$ref": "#/definitions/models.Event"
                }
            }
        },
        "models.EventVisibility": {
            "type": "string",
            "enum": [
                "private",
                "public"
            ],
            "x-enum-varnames": [
                "EventVisibilityPrivate",
                "EventVisibilityPublic"
            ]
        },
        "models.EventsResponse": {
            "description": "Multiple events response data",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Event"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "models.Guest": {
            "description": "Guest information and RSVP status",
            "type": "object",
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "event": {
                    "$ref": "#/definitions/models.Event"
                },
                "event_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "name": {
                    "description": "Guest Information",
                    "type": "string",
                    "example": "John Doe"
                },
                "notes": {
                    "type": "string",
                    "example": "Vegetarian, allergic to nuts"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "rsvp_date": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "rsvp_status": {
                    "description": "RSVP Status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RSVPStatus"
                        }
                    ]
                },
                "seat": {
                    "$ref": "#/definitions/models.Seat"
                },
                "seat_id": {
                    "description": "Seating (for future implementation)",
                    "type": "string"
                },
                "source": {
                    "description": "Source and Approval",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.GuestSource"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "user_id": {
                    "description": "User relationship (only if guest is a platform user) - NEW FIELD",
                    "type": "string"
                }
            }
        },
        "models.GuestRSVPResponse": {
            "description": "Guest RSVP response data",
            "type": "object",
            "properties": {
                "guest": {
                    "$ref": "#/definitions/models.Guest"
                },
                "message": {
                    "type": "string",
                    "example": "RSVP updated successfully"
                }
            }
        },
        "models.GuestRegistrationItem": {
            "type": "object",
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "rsvp_date": {
                    "type": "string"
                },
                "rsvp_status": {
                    "$ref": "#/definitions/models.RSVPStatus"
                },
                "seat": {
                    "$ref": "#/definitions/models.Seat"
                },
                "seat_id": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/definitions/models.GuestSource"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.GuestResponse": {
            "description": "Guest response data",
            "type": "object",
            "properties": {
                "guest": {
                    "$ref": "#/definitions/models.Guest"
                }
            }
        },
        "models.GuestSource": {
            "type": "string",
            "enum": [
                "owner_added",
                "invitation",
                "user_registration"
            ],
            "x-enum-comments": {
                "GuestSourceInvitation": "Registered via invitation",
                "GuestSourceOwnerAdded": "Added by owner manually",
                "GuestSourceUserRegistration": "Self-registered by authenticated platform user"
            },
            "x-enum-descriptions": [
                "Added by owner manually",
                "Registered via invitation",
                "Self-registered by authenticated platform user"
            ],
            "x-enum-varnames": [
                "GuestSourceOwnerAdded",
                "GuestSourceInvitation",
                "GuestSourceUserRegistration"
            ]
        },
        "models.GuestSummary": {
            "description": "Guest RSVP summary data",
            "type": "object",
            "properties": {
                "confirmation_rate": {
                    "type": "number"
                },
                "confirmed": {
                    "type": "integer"
                },
                "declined": {
                    "type": "integer"
                },
                "maybe": {
                    "type": "integer"
                },
                "pending": {
                    "type": "integer"
                },
                "total_guests": {
                    "type": "integer"
                }
            }
        },
        "models.GuestsResponse": {
            "description": "Multiple guests response data",
            "type": "object",
            "properties": {
                "guests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Guest"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "models.InvitationListItem": {
            "type": "object",
            "properties": {
                "accepted_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "prefilled_name": {
                    "type": "string"
                },
                "sent_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.InviteStatus"
                }
            }
        },
        "models.InvitationResponse": {
            "type": "object",
            "properties": {
                "accepted_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "expired_at": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "prefilled_name": {
                    "type": "string"
                },
                "prefilled_notes": {
                    "type": "string"
                },
                "prefilled_phone": {
                    "type": "string"
                },
                "sent_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.InviteStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.InviteStatus": {
            "type": "string",
            "enum": [
                "sent",
                "accepted",
                "expired",
                "cancelled"
            ],
            "x-enum-varnames": [
                "InviteStatusSent",
                "InviteStatusAccepted",
                "InviteStatusExpired",
                "InviteStatusCancelled"
            ]
        },
        "models.PlusOneRequest": {
            "description": "Plus-one guest information",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Jane Doe"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Also vegetarian"
                }
            }
        },
        "models.RSVPStatus": {
            "type": "string",
            "enum": [
                "pending",
                "accept",
                "decline",
                "maybe"
            ],
            "x-enum-varnames": [
                "RSVPStatusPending",
                "RSVPStatusAccept",
                "RSVPStatusDecline",
                "RSVPStatusMaybe"
            ]
        },
        "models.Room": {
            "description": "Room information and details",
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer",
                    "example": 200
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Spacious ballroom with high ceilings"
                },
                "floor": {
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "name": {
                    "type": "string",
                    "example": "Main Ballroom"
                },
                "room_type": {
                    "$ref": "#/definitions/models.RoomType"
                },
                "seats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Seat"
                    }
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "venue": {
                    "$ref": "#/definitions/models.Venue"
                },
                "venue_id": {
                    "type": "string"
                }
            }
        },
        "models.RoomResponse": {
            "description": "Room response data",
            "type": "object",
            "properties": {
                "room": {
                    "$ref": "#/definitions/models.Room"
                }
            }
        },
        "models.RoomType": {
            "type": "string",
            "enum": [
                "general",
                "ballroom",
                "conference",
                "theater",
                "banquet",
                "outdoor"
            ],
            "x-enum-varnames": [
                "RoomTypeGeneral",
                "RoomTypeBallroom",
                "RoomTypeConference",
                "RoomTypeTheater",
                "RoomTypeBanquet",
                "RoomTypeOutdoor"
            ]
        },
        "models.RoomsResponse": {
            "description": "Multiple rooms response data",
            "type": "object",
            "properties": {
                "rooms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Room"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "models.Seat": {
            "description": "Seat information and details",
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/models.SeatCategory"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "guest": {
                    "$ref": "#/definitions/models.Guest"
                },
                "guest_id": {
                    "type": "string"
                },
                "height": {
                    "type": "number",
                    "example": 1
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "number": {
                    "type": "string",
                    "example": "1"
                },
                "room": {
                    "$ref": "#/definitions/models.Room"
                },
                "room_id": {
                    "type": "string"
                },
                "rotation": {
                    "type": "number",
                    "example": 0
                },
                "row": {
                    "type": "string",
                    "example": "A"
                },
                "status": {
                    "$ref": "#/definitions/models.SeatStatus"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "width": {
                    "type": "number",
                    "example": 1
                },
                "x": {
                    "description": "Position X coordinate",
                    "type": "number",
                    "example": 10.5
                },
                "y": {
                    "description": "Position Y coordinate",
                    "type": "number",
                    "example": 15.2
                }
            }
        },
        "models.SeatCategory": {
            "type": "string",
            "enum": [
                "standard",
                "vip",
                "accessible",
                "premium",
                "economy",
                "standing"
            ],
            "x-enum-varnames": [
                "SeatCategoryStandard",
                "SeatCategoryVIP",
                "SeatCategoryAccessible",
                "SeatCategoryPremium",
                "SeatCategoryEconomy",
                "SeatCategoryStanding"
            ]
        },
        "models.SeatResponse": {
            "description": "Seat response data",
            "type": "object",
            "properties": {
                "seat": {
                    "$ref": "#/definitions/models.Seat"
                }
            }
        },
        "models.SeatStatus": {
            "type": "string",
            "enum": [
                "available",
                "occupied",
                "reserved",
                "blocked",
                "maintenance"
            ],
            "x-enum-varnames": [
                "SeatStatusAvailable",
                "SeatStatusOccupied",
                "SeatStatusReserved",
                "SeatStatusBlocked",
                "SeatStatusMaintenance"
            ]
        },
        "models.SeatingAssignment": {
            "description": "Seating assignment information and details",
            "type": "object",
            "properties": {
                "assigned_at": {
                    "type": "string"
                },
                "assigned_by": {
                    "type": "string"
                },
                "assigned_by_user": {
                    "$ref": "#/definitions/models.User"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "event": {
                    "$ref": "#/definitions/models.Event"
                },
                "event_id": {
                    "type": "string"
                },
                "guest": {
                    "$ref": "#/definitions/models.Guest"
                },
                "guest_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "notes": {
                    "type": "string",
                    "example": "VIP guest - front row preference"
                },
                "seat": {
                    "$ref": "#/definitions/models.Seat"
                },
                "seat_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "models.SeatingAssignmentResponse": {
            "description": "Seating assignment response data",
            "type": "object",
            "properties": {
                "seating_assignment": {
                    "$ref": "#/definitions/models.SeatingAssignment"
                }
            }
        },
        "models.SeatingAssignmentsResponse": {
            "description": "Multiple seating assignments response data",
            "type": "object",
            "properties": {
                "seating_assignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SeatingAssignment"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "models.SeatsResponse": {
            "description": "Multiple seats response data",
            "type": "object",
            "properties": {
                "seats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Seat"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "models.SignInRequest": {
            "description": "User login request data",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "models.UpdateEventRequest": {
            "description": "Event update request data",
            "type": "object",
            "properties": {
                "allow_self_rsvp": {
                    "type": "boolean",
                    "example": true
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "wedding",
                        "celebration"
                    ]
                },
                "date": {
                    "type": "string",
                    "example": "2024-06-15T18:00:00Z"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "A beautiful celebration of love"
                },
                "location": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Grand Hotel Ballroom"
                },
                "max_guests": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 150
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "John \u0026 Jane's Wedding"
                },
                "require_approval": {
                    "type": "boolean",
                    "example": false
                },
                "tags": {
                    "type": "array",
                    "maxItems": 50,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "formal",
                        "outdoor"
                    ]
                },
                "visibility": {
                    "enum": [
                        "private",
                        "public"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.EventVisibility"
                        }
                    ],
                    "example": "public"
                }
            }
        },
        "models.UpdateGuestRSVPRequest": {
            "description": "Guest RSVP update request data",
            "type": "object",
            "required": [
                "rsvp_status"
            ],
            "properties": {
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Looking forward to it!"
                },
                "rsvp_status": {
                    "enum": [
                        "pending",
                        "accept",
                        "decline",
                        "maybe"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RSVPStatus"
                        }
                    ],
                    "example": "accept"
                }
            }
        },
        "models.UpdateGuestRequest": {
            "description": "Guest update request data",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "John Doe"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Vegetarian, allergic to nuts"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "+1234567890"
                },
                "rsvp_status": {
                    "enum": [
                        "pending",
                        "accept",
                        "decline",
                        "maybe"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RSVPStatus"
                        }
                    ],
                    "example": "accept"
                }
            }
        },
        "models.UpdateInvitationRequest": {
            "type": "object",
            "properties": {
                "expires_in_days": {
                    "type": "integer",
                    "maximum": 90,
                    "minimum": 1,
                    "example": 30
                },
                "prefilled_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "prefilled_notes": {
                    "type": "string",
                    "example": "Vegetarian"
                },
                "prefilled_phone": {
                    "type": "string",
                    "example": "+1234567890"
                }
            }
        },
        "models.UpdateProfileRequest": {
            "description": "Profile update request data",
            "type": "object",
            "required": [
                "first_name",
                "last_name"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "profile_pic": {
                    "type": "string",
                    "example": "https://example.com/profile.jpg"
                }
            }
        },
        "models.UpdateRoomRequest": {
            "description": "Room update request data",
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 250
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Spacious ballroom with high ceilings"
                },
                "floor": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Main Ballroom"
                },
                "room_type": {
                    "enum": [
                        "general",
                        "ballroom",
                        "conference",
                        "theater",
                        "banquet",
                        "outdoor"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RoomType"
                        }
                    ],
                    "example": "ballroom"
                }
            }
        },
        "models.UpdateSeatRequest": {
            "description": "Seat update request data",
            "type": "object",
            "properties": {
                "category": {
                    "enum": [
                        "standard",
                        "vip",
                        "accessible",
                        "premium",
                        "economy",
                        "standing"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SeatCategory"
                        }
                    ],
                    "example": "vip"
                },
                "height": {
                    "type": "number",
                    "minimum": 0.1,
                    "example": 1.2
                },
                "number": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 1,
                    "example": "2"
                },
                "rotation": {
                    "type": "number",
                    "example": 45
                },
                "row": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 1,
                    "example": "B"
                },
                "status": {
                    "enum": [
                        "available",
                        "occupied",
                        "reserved",
                        "blocked",
                        "maintenance"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SeatStatus"
                        }
                    ],
                    "example": "reserved"
                },
                "width": {
                    "type": "number",
                    "minimum": 0.1,
                    "example": 1.2
                },
                "x": {
                    "type": "number",
                    "example": 12
                },
                "y": {
                    "type": "number",
                    "example": 18
                }
            }
        },
        "models.UpdateVenueRequest": {
            "description": "Venue update request data",
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "123 Main Street"
                },
                "city": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "New York"
                },
                "country": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "USA"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Elegant ballroom with modern amenities"
                },
                "is_public": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Grand Hotel Ballroom"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "+1-555-123-4567"
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "10001"
                },
                "state": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "NY"
                },
                "website": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "https://grandhotel.com"
                }
            }
        },
        "models.User": {
            "description": "User account information",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "profile_pic": {
                    "type": "string",
                    "example": "https://example.com/profile.jpg"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "models.UserEventRegistrationRequest": {
            "description": "User event registration request data",
            "type": "object",
            "properties": {
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Vegetarian, allergic to nuts"
                },
                "plus_one": {
                    "$ref": "#/definitions/models.PlusOneRequest"
                }
            }
        },
        "models.UserEventRegistrationResponse": {
            "type": "object",
            "properties": {
                "guest": {
                    "$ref": "#/definitions/models.GuestRegistrationItem"
                },
                "message": {
                    "type": "string",
                    "example": "Successfully registered for event"
                }
            }
        },
        "models.Venue": {
            "description": "Venue information and details",
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "123 Main Street"
                },
                "city": {
                    "type": "string",
                    "example": "New York"
                },
                "country": {
                    "type": "string",
                    "example": "USA"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Elegant ballroom with modern amenities"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_public": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "example": "Grand Hotel Ballroom"
                },
                "owner": {
                    "$ref": "#/definitions/models.User"
                },
                "owner_id": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "example": "+1-555-123-4567"
                },
                "postal_code": {
                    "type": "string",
                    "example": "10001"
                },
                "rooms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Room"
                    }
                },
                "state": {
                    "type": "string",
                    "example": "NY"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "website": {
                    "type": "string",
                    "example": "https://grandhotel.com"
                }
            }
        },
        "models.VenueResponse": {
            "description": "Venue response data",
            "type": "object",
            "properties": {
                "venue": {
                    "$ref": "#/definitions/models.Venue"
                }
            }
        },
        "models.VenuesResponse": {
            "description": "Multiple venues response data",
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "venues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Venue"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "SeatMaster Backend API",
	Description:      "This is the SeatMaster backend server for event management and seating arrangements.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
